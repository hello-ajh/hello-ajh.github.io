<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[laravel数据库填充]]></title>
    <url>%2F2019%2F08%2F23%2Flaravel%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A1%AB%E5%85%85%2F</url>
    <content type="text"><![CDATA[laravel数据库填充 创建填充php artisan make:seeder UserTableSeeder 运行填充 执行单个填充php artisan db:seed --class=PaperTableSeeder 执行所有填充php artisan db:seed该命令会运行DatabaseSeeder填充文件，可以在该文件中包含所有其他的填充文件，一次性运行 重建数据库，并重新执行填充php artisan migrate:refresh --seed]]></content>
      <categories>
        <category>laravel</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[laravel数据库迁移]]></title>
    <url>%2F2019%2F08%2F23%2Flaravel%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB%2F</url>
    <content type="text"><![CDATA[laravel数据库迁移 创建迁移php artisan make:migration create_user_table ps:在当前项目中第一次运行迁移前，需要先执行 php artisan migrate:install 上述命令会在数据库中生成一张migrations数据表，用来记录迁移文件 运行迁移php artisan migrate【已经执行过的迁移文件不会再次执行】 回滚迁移php artisan migrate:rollback【回滚最后一次的迁移操作，回滚操作不删除迁移文件】 重建数据库php artisan migrate:refresh【删除所有数据表，并执行所有迁移】]]></content>
      <categories>
        <category>laravel</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JavaScript——正则表达式]]></title>
    <url>%2F2019%2F08%2F11%2FJavaScript%E2%80%94%E2%80%94%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[JavaScript——正则表达式正则表达式 用于定义一些字符串的规则，计算机可以根据正则表达式，来检查一个字符串是否符合规则，或者将字符串中符合规则的内容提取出来 创建正则表达式使用常量创建正则表达式 语法：var 变量 = /正则表达式/匹配模式 123使用常量创建正则表达式 var reg = /a/i; console.log(reg.test(&quot;bc&quot;)); 创建一个正则表达式,检查一个字符串中是否含有a或b，使用 | 表示或者 1234var reg = /a|b|c/; console.log(reg.test(&quot;abc&quot;)); console.log(reg.test(&quot;ac&quot;)); console.log(reg.test(&quot;bcda&quot;)); 创建一个正则表达式,检查一个字符串中是否含有字母[]里的内容也是或的关系 表示查找方括号之间的任何字符。有则返回true [ab] == a|b [a-z]表示任意小写字母 [A-Z]表示任意大写字母 [A-z]表示任意字母 [0-9]表示任意数字 123456789reg = /[a-z]/console.log(reg.test(&quot;d&quot;));reg = /[A-Z]/console.log(reg.test(&quot;D&quot;));reg = /[A-z]/console.log(reg.test(&quot;d&quot;));console.log(reg.test(&quot;D&quot;));reg = /[0-9]/console.log(reg.test(&quot;abc1&quot;)); 检查一个字符串中是否含有abc或 adc或 aec 123reg = /a[bde]c/console.log(reg.test(&quot;adc&quot;));console.log(reg.test(&quot;afc&quot;)); [^ ]表示查找任何不在方括号之间的字符。有则返回true 12345reg = /[^ab]/; console.log(reg.test(&quot;a&quot;)); console.log(reg.test(&quot;b&quot;)); console.log(reg.test(&quot;c&quot;)); console.log(reg.test(&quot;abc&quot;)); 正则语法量词 通过量词可以设置一个内容出现的次数 - 量词只对它前面的一个内容起作用 - {n} 正好出现n次 - {m,n} 出现m到n次，注意：逗号后不能有空格!!! - {m,} 出现m次以上 - + 至少一个，相当于{1,} - * 0个或多个，相当于{0,} - ? 0个或1个，相当于{0,1} 123456789101112131415161718//连续出现3个avar reg = /a&#123;3&#125;/;//连续出现3个abreg = /(ab)&#123;3&#125;///出现abc,b的数量为1-3个//注意： ,后不能有空格!!!reg = /ab&#123;1,3&#125;c///出现abc,b的数量为1个或1个以上reg = /ab+c///出现abc,b的数量为0个或0个以上reg = /ab*c///出现abc,b的数量为0个或1个reg = /ab?c/ 检查一个字符串中是否以a开头 ^ 表示开头 $ 表示结尾 123456789reg = /^a/; //匹配开头的areg = /a$/; //匹配结尾的a如果在一个正则表达式中同时使用^和$，则要求字符串必须完全符合正则表达式 reg = /^a$/; console.log(reg.test(&quot;abcd&quot;));//false console.log(reg.test(&quot;bcda&quot;));//false console.log(reg.test(&quot;abcda&quot;));//false console.log(reg.test(&quot;a&quot;));//true 创建一个正则表达式用来检查一个字符串是否是一个合法手机号 手机号的规则： 11位 1.以1开头 2.第二位3-9任意数字 3.三位以后任意数字9个 ^1[3-9][0-9]{9}$ 123456789var phoneStr = &quot;13567890123&quot;; var phoneReg = /^1[3-9][0-9]&#123;9&#125;$/; console.log(phoneReg.test(phoneStr)); console.log(phoneReg.test(&quot;17858262960&quot;));//true console.log(phoneReg.test(&quot;11058262960&quot;));//false console.log(phoneReg.test(&quot;10058262960&quot;));//false console.log(phoneReg.test(&quot;12058262960&quot;));//false console.log(phoneReg.test(&quot;1785826296O&quot;));//false console.log(phoneReg.test(&quot;178582629601&quot;));//false 正则中的转义字符 检查一个字符串中是否含有. . 表示任意字符 在正则表达式中使用\ 作为转义字符 \. 来表示. \\ 表示 注意：使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符， 如果要使用\则需要使用\\来代替 12345678910111213141516\w- 任意字母、数字、_ [A-z0-9_]\W- 除了字母、数字、_ [^A-z0-9_]\d- 任意数字 [0-9]\D- 除了数字 [^0-9]\s- 空格\S- 除了空格\b- 单词边界\B- 除了单词边界 12创建一个正则表达式检查一个字符串中是否含有单词child reg = /\bchild\b/; 使用构造函数创建正则表达式 语法： var 变量 = new RegExp(“正则表达式”, “匹配模式”); var reg = new RegExp(“a”); 这个正则表达式可以用来检查一个字符串中是否含有a，在构造函数中可以传递一个匹配模式作为第二个参数，可以是： i 忽略大小写 g 全局匹配模式 正则表达式的使用方法 test() 使用这个方法可以用来检查一个字符串是否符合正则表达式的规则， 如果符合则返回true，否则返回false 1234console.log(reg.test(&quot;abc&quot;));//trueconsole.log(reg.test(&quot;bcabc&quot;));//trueconsole.log(reg.test(&quot;bc&quot;));//falseconsole.log(reg.test(&quot;Abc&quot;));//true]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JavaScript——arguments]]></title>
    <url>%2F2019%2F08%2F11%2FJavaScript%E2%80%94%E2%80%94arguments%2F</url>
    <content type="text"><![CDATA[JavaScript——arguments 在调用函数时，浏览器每次都会传递进两个隐含的参数： 1.函数的上下文对象this 2.封装实参的对象arguments - arguments是一个类数组对象（类似数组的对象）， 也可以通过索引进行操作， 通过arguments.length来获取长度 - 在调用函数时，我们所传递的实参都会封装到arguments中， - 我们即使不定义形参，也可以通过arguments来使用实参， arguments[0]表示第一个参数 arguments[1]表示第二个参数 - 它里面有一个属性callee，对应当前正在执行的函数的对象 123456function fun()&#123; console.log(arguments.length);//2 console.log(arguments[0]+&quot;~~&quot;+arguments[1]);//1~~2 console.log(arguments.callee);//function fun()&#123;console...&#125;&#125;fun(1, 2);]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JavaScript——this]]></title>
    <url>%2F2019%2F08%2F11%2FJavaScript%E2%80%94%E2%80%94this%2F</url>
    <content type="text"><![CDATA[JavaScript——this JavaScript中的上下文对象this，是由调用的对象决定的 以函数的形式调用，this就是window123456function fun()&#123; console.log(this.name);&#125;fun();//以函数的形式调用，this就是window//由于没有全局变量name，所以没有输出 以方法的形式调用，this就是调用方法的对象12345678910//创建一个对象var obj = &#123; name:&quot;孙悟空&quot;, sayName:function () &#123; console.log(this.name); &#125;&#125;;//以方法形式调用this,this指向调用方法的对象 obj.sayName();//输出“孙悟空”]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[markdown编辑器]]></title>
    <url>%2F2019%2F08%2F10%2Fmarkdown%E7%BC%96%E8%BE%91%E5%99%A8%2F</url>
    <content type="text"><![CDATA[markdown编辑器（兼容github的markdown语法） Typora（本地markdown编辑器）]]></content>
      <categories>
        <category>markdown</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[laravel_csrf白名单]]></title>
    <url>%2F2019%2F08%2F09%2Flaravel-csrf%E7%99%BD%E5%90%8D%E5%8D%95%2F</url>
    <content type="text"><![CDATA[laravel_csrf白名单 laravel中如何添加路由白名单？ 在app\Http\Middleware\VerifyCsrfToken.php中添加要作为排除csrf检测的路由]]></content>
      <categories>
        <category>laravel</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Fontello免费图标]]></title>
    <url>%2F2019%2F07%2F24%2FFontello%E5%85%8D%E8%B4%B9%E5%9B%BE%E6%A0%87%2F</url>
    <content type="text"><![CDATA[Fontello免费图标 官网fontello 选择图标直接点击想要的图标即可选中，也可以用鼠标拖动进行多选 下载 本地使用将下载下来的压缩包解压并复制到网站的public目录下，然后引入fontello.css 1&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/fontello.css&quot;&gt; 图标展示1&lt;i class=&quot;icon-emo-happy&quot;&gt;&lt;/i&gt; class格式 12icon-namename就是Fontello官网上的name]]></content>
      <categories>
        <category>免费图标</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[jQuery实现返回顶部按钮]]></title>
    <url>%2F2019%2F07%2F24%2FjQuery%E5%AE%9E%E7%8E%B0%E8%BF%94%E5%9B%9E%E9%A1%B6%E9%83%A8%E6%8C%89%E9%92%AE%2F</url>
    <content type="text"><![CDATA[1、创建一个按钮，并设置样式123&lt;button id=&quot;btnTop&quot; class=&quot;p-2 mb-2 bg-danger text-white clearfix&quot; style=&quot;position: fixed; top: 85%; left: 80%; display: none;&quot;&gt;Top&lt;/button&gt; 2、添加jQuery方法此时，这个按钮并没有显示出来，我们需要当页面的滚动条距离最上方有50个像素时，显示“回到顶部”按钮，通过JQuery来实现 123456789101112$(function () &#123; $(window).scroll(function () &#123; if ($(window).scrollTop() &gt;= 50) &#123; //fadeIn淡入效果 $(&apos;#btnTop&apos;).fadeIn(); &#125; else &#123; //fadeOut淡出效果 $(&apos;#btnTop&apos;).fadeOut(); &#125; &#125;); &#125;); 3、添加click事件123$(&apos;#btnTop&apos;).click(function () &#123; $(&apos;html,body&apos;).animate(&#123; scrollTop: 0 &#125;, 500); &#125;);]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo设置]]></title>
    <url>%2F2019%2F07%2F23%2Fhexo%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[hexo设置一、安装Git淘宝的Git地址 二、安装NodejsNodejs 三、通过npm安装HexoNode.js安装成功后，同时会自动安装一个包管理器，称为npm（Node Package Manager）。 什么是npm？npm是一个包管理器，发布者将自己的代码发布（npm publish）到代码仓库（registry），使用者将自己需要的包写入package.json文件中，到代码仓库中把代码下载（npm install）下来。 安装：npm install -g hexo-cli 由于npm代码仓库的服务器在国外，由于Great Firewall的缘故，下载速度可能不尽如人意，这时你可以使用淘宝的npm代码仓库，通过npm安装cnpm：npm install -g cnpm --registry=https://registry.npm.taobao.org安装成功后，可以通过以下命令查看cnpm版本：cnpm -v通过cnpm来操作下载速度会得到很大提升，但包的版本不一定是最新的。之后所有的npm都可以换成cnpm 四、本地使用1、创建博客目录hexo init username.github.io 这个username就是仓库的username，同时也是github的username，目的就是访问githubPage时可以直接使用以下方式访问https://username.github.io/示例：https://hello-ajh.github.io/ 2、更换主题在更换主题之前要先切换到username.github.io目录，执行以下命令 这里选择一个比较简洁的主题：nextgit clone https://github.com/theme-next/hexo-theme-next themes/next 之后需要更改username.github.io/_config.yml里面的配置 title: 御坂0416的博客 //你博客的名字author: 御坂0416 //作者名字language: zh-CN //语言 中文theme: next //刚刚安装的主题名称deploy:type: git //使用Git 发布repo: https://github.com/hello-ajh/hello-ajh.github.io.git // 刚创建的Github仓库 主题配置： 主题配置文件在username.github.io/themes/next/_config.yml中修改 3、写文章 hexo new BlogName会在source/_posts目录下生成BlogName.md文件，可以vim或其他Markdown编辑器进行修改。 4、安装hexo-deployer-git自动部署发布工具 npm install hexo-deployer-git --save 5、生成静态文件、清理、重启Hexo hexo clean每次修改文章后，都需要清理一下，hexo g（g代表generate），生成博客静态文件最后也不要忘了通过hexo s重新启动Hexo。hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 6、发布到githubPage测试没问题后，我们就生成静态网页文件发布至我们的Github pages 中。 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 如果这是你的第一次，终端会让你输入Github 的邮箱和密码，正确输入后，骚等片刻，就会把你的博客上传至Github 了。以后在每次把博客写完后，执行一下这个命令就可以直接发布了，灰常苏胡。 注意：这里会默认通过Git的方式上传到github的仓库，但是会改变原有的目录结构 7、乱码问题 hexo新建的文章为source/_posts/xxx.md，默认编码格式为ANSI，需要使用记事本将其另存为UTF-8格式或者使用sublime将其另存为UTF-8 with BOM格式]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hello World</category>
      </categories>
  </entry>
</search>
